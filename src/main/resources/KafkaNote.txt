##### Terms in Kafka
producer broker consumer comsumer-group
topic partition message

partition just a part of a big topic. each broker has a partition.
and the order of message within the same partition is guaranteed.
but maybe disorder in multiply partition.


#### consistence
consumer keep the status of message, not ack to broker for message.
if any failure, consumer need get message from broker again.

producer send asynchronous message. just put it in memory.
background process may failed send to broker. it is a risk.

there are copy mechanism between brokers.

#### key technique.

1. zero-copy sendfile in linux. to reduce copy between kernel and user mode.
2. kafka record each consumer's offset to reduce keep data for each consumer.
3. push/pull Producer push data to kafka and Consumer pull data from kafka
4. no balance between producer and broker
   zookeeper balance broker and consumer.


##### design philosophy
1. persistence
2. focus on throughput instead of function
3. born with distribution.
4. use the disc to store message. but kafka utilize the speed and throughput
of ordered disc access.
5. Kafka keep the message for a certain time regardless message consumed or not.
6. kafka performance is constant to size of data.



#### kafka.javaapi.consumer.ConsumerConnector

connector actual provide a higher level api to set the decoder for key and value.

def createMessageStreams[K, V](topicCountMap : scala.collection.Map[scala.Predef.String, scala.Int],
 keyDecoder : kafka.serializer.Decoder[K],
 valueDecoder : kafka.serializer.Decoder[V])
 : scala.collection.Map[scala.Predef.String, scala.List[kafka.consumer.KafkaStream[K, V]]]














